configfile: workflow.basedir + '/../config/config.yaml'

samples_list  = list(config['samples'].keys())
# ['bcdCT_MB21_02', 'bcdCT_MB21_03']

barcodes_dict = {sample: config['samples'][sample]['barcodes'] for sample in samples_list}
# {'bcdCT_MB21_02': {'ATAC': 'TATAGCCT', 'H3K27ac': 'ATAGAGGC', 'H3K27me3': 'CCTATCCT'}, 'bcdCT_MB21_03': {'H3K27ac': 'ATAGAGGC', 'H3K27me3': 'CCTATCCT'}}


shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; conda activate " + config['general']['conda_env']  + " ; ")

rule all_cellranger:
    input:
        cellranger    = ['results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        bigwig_all    = ['results/{sample}/{antibody}_{barcode}/bigwig/all_reads.bw'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        macs_narrow   = ['results/{sample}/{antibody}_{barcode}/peaks/macs_narrow/{antibody}_peaks.narrowPeak'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        macs_broad    = ['results/{sample}/{antibody}_{barcode}/peaks/macs_broad/{antibody}_peaks.broadPeak'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        chrom_sizes   = 'results/mm10.chrom.sizes',
        SEACR_peaks   = ['results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks.relaxed.bed'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        fragments     = ['results/{sample}/{antibody}_{barcode}/fragments/fragments.tsv.gz'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        peaks_overlap = ['results/{sample}/{antibody}_{barcode}/barcode_metrics/peaks_barcodes.txt'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        barcodes_sum  = ['results/{sample}/{antibody}_{barcode}/barcode_metrics/all_barcodes.txt'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        cell_pick     = ['results/{sample}/{antibody}_{barcode}/cell_picking/metadata.csv'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody]) for sample in samples_list  for antibody in barcodes_dict[sample].keys()],
        seurat        = ['results/{sample}/{antibody}_{barcode}/seurat/bin_{binwidth}/Seurat_object.Rds'.format(sample = sample, antibody = antibody, barcode = barcodes_dict[sample][antibody],binwidth = binwidth) for sample in samples_list  for antibody in barcodes_dict[sample].keys() for binwidth in config['general']['binwidth']],


rule run_cellranger:
    input:
        lambda wildcards: '{0}/barcode_{1}/'.format(config['samples'][wildcards.sample]['fastq_path'],wildcards.barcode)
    output:
        bam  = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam',
        frag = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/fragments.tsv.gz',
        meta = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/singlecell.csv',
    params:
        cellranger_ref = '/data/ref/cellranger-atac/refdata-cellranger-atac-mm10-2020-A-2.0.0/'
    threads: 40
    shell:
        'rm -r results/cellranger/{wildcards.sample}_{wildcards.antibody}_{wildcards.barcode}/; '
        'cd results/cellranger/; '
        '/data/bin/cellranger-atac count --id {wildcards.sample}_{wildcards.antibody}_{wildcards.barcode} --reference {params.cellranger_ref} --fastqs {input}'

rule bam_to_bw:
    input:
        cellranger_bam = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam'
    output:
        bigwig         = 'results/{sample}/{antibody}_{barcode}/bigwig/all_reads.bw'
    threads: 16
    shell:
        'bamCoverage -b {input.cellranger_bam} -o {output.bigwig} -p {threads} --minMappingQuality 5 '
        ' --binSize 50 --centerReads --smoothLength 250 --normalizeUsing RPKM --ignoreDuplicates --extendReads'

rule run_macs_narrow:
    input:
        cellranger_bam = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam'
    output:
        narrow_peaks = 'results/{sample}/{antibody}_{barcode}/peaks/macs_narrow/{antibody}_peaks.narrowPeak'
    params:
        macs_outdir  = 'results/{sample}/{antibody}_{barcode}/peaks/macs_narrow/'
    shell:
        'macs2 callpeak -t {input.cellranger_bam} -g mm -f BAMPE -n {wildcards.antibody} '
        '--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 2>&1 '

rule run_macs_broad:
    input:
        cellranger_bam = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam'
    output:
        broad_peaks = 'results/{sample}/{antibody}_{barcode}/peaks/macs_broad/{antibody}_peaks.broadPeak'
    params:
        macs_outdir = 'results/{sample}/{antibody}_{barcode}/peaks/macs_broad/'
    shell:
        'macs2 callpeak -t {input} -g mm -f BAMPE -n {wildcards.antibody} '
        '--outdir {params.macs_outdir} -q 0.05 -B --SPMR --keep-dup=1 --broad-cutoff=0.1 --broad 2>&1 '

rule download_chromsizes:
    output:
        'results/mm10.chrom.sizes'
    params:
        url="http://hgdownload.cse.ucsc.edu/goldenpath/mm10/bigZips/mm10.chrom.sizes"
    shell:
        "wget -O {output} {params.url}"

rule prep_SEACR_files:
    input:
        fragments = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/fragments.tsv.gz',
        genome = 'results/mm10.chrom.sizes'
    output:
        'results/{sample}/{antibody}_{barcode}/peaks/SEACR/fragments.bg'
    shell:
        "bedtools genomecov -bg -g {input.genome} -i {input.fragments} > {output}"

rule run_SEACR:
    input:
        'results/{sample}/{antibody}_{barcode}/peaks/SEACR/fragments.bg',
    output:
        'results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks.relaxed.bed',
    params:
        out_prefix = 'results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks',
    shell:
        "~/bin/SEACR/SEACR_1.3.sh {input} 0.01 norm relaxed {params.out_prefix}"

rule add_barcode_fragments:
    input:
        fragments = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/fragments.tsv.gz',
    output:
        fragments = 'results/{sample}/{antibody}_{barcode}/fragments/fragments.tsv.gz',
        index     = 'results/{sample}/{antibody}_{barcode}/fragments/fragments.tsv.gz.tbi',
    params:
        script    = os.path.dirname(workflow.basedir) + '/scripts/add_sample_to_fragments.py',
    shell:
        'python3 {params.script} {input.fragments} {wildcards.sample} | bgzip > {output.fragments}; '
        'tabix -p bed {output.fragments}'


rule barcode_overlap_peaks:
    input:
        bam    = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam',
        peaks  = 'results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks.relaxed.bed',
    output:
        overlap = 'results/{sample}/{antibody}_{barcode}/barcode_metrics/peaks_barcodes.txt'
    params:
        get_cell_barcode     = os.path.dirname(workflow.basedir) + '/scripts/get_cell_barcode.awk',
        add_sample_to_list   = os.path.dirname(workflow.basedir) + '/scripts/add_sample_to_list.py',
        tmpdir               = config['general']['tempdir']
    shell:
        'bedtools intersect -abam {input.bam} -b {input.peaks} -u | samtools view -f2 | '
        'awk -f {params.get_cell_barcode} | sed "s/CB:Z://g" | python3 {params.add_sample_to_list} {wildcards.sample} | '
        'sort -T {params.tmpdir} | uniq -c > {output.overlap} && [[ -s {output.overlap} ]] ; '

rule barcode_metrics_all:
  input:
     bam       = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/possorted_bam.bam',
  output:
    all_bcd    = 'results/{sample}/{antibody}_{barcode}/barcode_metrics/all_barcodes.txt'
  params:
      get_cell_barcode   = os.path.dirname(workflow.basedir) + '/scripts/get_cell_barcode.awk',
      add_sample_to_list = os.path.dirname(workflow.basedir) + '/scripts/add_sample_to_list.py',
      tmpdir             = config['general']['tempdir']
  shell:
    ' samtools view -f2 {input.bam}| '
    'awk -f {params.get_cell_barcode} | sed "s/CB:Z://g" | python3 {params.add_sample_to_list} {wildcards.sample} | '
    'sort -T {params.tmpdir} | uniq -c > {output.all_bcd} && [[ -s {output.all_bcd} ]] ; '

####### CELLS SELECTION
rule cell_selection:
    input:
        bcd_all   = 'results/{sample}/{antibody}_{barcode}/barcode_metrics/all_barcodes.txt',
        bcd_peak  = 'results/{sample}/{antibody}_{barcode}/barcode_metrics/peaks_barcodes.txt',
        peaks     = 'results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks.relaxed.bed',
        metadata  = 'results/cellranger/{sample}_{antibody}_{barcode}/outs/singlecell.csv',
        fragments = 'results/{sample}/{antibody}_{barcode}/fragments/fragments.tsv.gz',
    output:
        'results/{sample}/{antibody}_{barcode}/cell_picking/cells_10x.png',
        'results/{sample}/{antibody}_{barcode}/cell_picking/cells_picked.png',
        'results/{sample}/{antibody}_{barcode}/cell_picking/cells_picked.bw',
        'results/{sample}/{antibody}_{barcode}/cell_picking/cells_not_picked.bw',
        'results/{sample}/{antibody}_{barcode}/cell_picking/metadata.csv',
    params:
        script      = os.path.dirname(workflow.basedir) + '/scripts/pick_cells.R',
        out_prefix  = 'results/{sample}/{antibody}_{barcode}/cell_picking/',
    shell:
        "Rscript {params.script} --metadata {input.metadata} --fragments {input.fragments} --bcd_all {input.bcd_all} --bcd_peak {input.bcd_peak} --antibody {wildcards.antibody} --sample {wildcards.sample} --out_prefix {params.out_prefix}"

rule create_seurat_object:
    input:
        fragments = 'results/{sample}/{antibody}_{barcode}/fragments/fragments.tsv.gz',
        peaks     = 'results/{sample}/{antibody}_{barcode}/peaks/SEACR/peaks.relaxed.bed',
        metadata  = 'results/{sample}/{antibody}_{barcode}/cell_picking/metadata.csv',
    output:
        'results/{sample}/{antibody}_{barcode}/seurat/bin_{binwidth}/Seurat_object.Rds',
    params:
        script      = os.path.dirname(workflow.basedir) + '/scripts/create_seurat_object.R',
        out_prefix  = 'results/{sample}/{antibody}_{barcode}/seurat/bin_{binwidth}/',
        genome      = config['general']['genome'],
    shell:
        "Rscript {params.script} --sample {wildcards.sample}   --antibody {wildcards.antibody} --metadata {input.metadata}   --fragments {input.fragments} --peaks {input.peaks} --out_prefix {params.out_prefix} --window {wildcards.binwidth} --genome_version {params.genome}"

