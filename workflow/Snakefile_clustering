import itertools

include: "Snakefile_cellranger"

configfile: workflow.basedir + '/../config/config.yaml'

binsize=5000

samples_list  = list(config['samples'].keys())
# ['bcdCT_MB21_02', 'bcdCT_MB21_03']

barcodes_dict = {sample: config['samples'][sample]['barcodes'] for sample in samples_list}
# {'bcdCT_MB21_02': {'ATAC': 'TATAGCCT', 'H3K27ac': 'ATAGAGGC', 'H3K27me3': 'CCTATCCT'}, 'bcdCT_MB21_03': {'H3K27ac': 'ATAGAGGC', 'H3K27me3': 'CCTATCCT'}}

# Rename a modality if it has "_" in its name, substitute "_" with "-"
for sample in samples_list:
    for modality in barcodes_dict[sample].keys():
        if "_" in modality:
            new_modality = modality.replace("_","-")
            sys.stderr.write("*** Warning: Renaming modality name {old} to {new}; Can't have \"_\" in modality name *** \n".format(old=modality,new=new_modality))
            barcodes_dict[sample][new_modality] = barcodes_dict[sample][modality]
            del(barcodes_dict[sample][modality])

antibodies_list = list(set(itertools.chain(*[barcodes_dict[sample].keys() for sample in barcodes_dict.keys()])))
# ['H3K27me3', 'ATAC', 'H3K27ac']

# Find combinations of modalities
# These are only realistic combinations of modalities
modalities_combinations =  [itertools.combinations(list(barcodes_dict[sample].keys()),i) for sample in samples_list for i in range(2,1+len(barcodes_dict[sample].keys()))]
modalities_combinations = [list(x) for x in list(set(itertools.chain(*modalities_combinations)))]
# [('H3K27ac', 'H3K27me3'), ('ATAC', 'H3K27me3'), ('ATAC', 'H3K27ac')]
print(modalities_combinations)



shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; conda activate " + config['general']['conda_env']  + " ; ")

def get_input_for_multiple_modalities_merge(combination, binwidth):
    combination = combination.split("_")
    files = ["results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered_renamed.Rds".format( modality = modality, binwidth = binwidth) for modality in combination]
    return(files)

def get_input_for_fragments_merge(bcd_dic,m):
    result = ["results/{sample}/{modality}_{barcode}/fragments/fragments.tsv.gz".format(sample=sample,modality=m,barcode=bcd_dic[sample][m]) for sample in bcd_dic.keys() if m in bcd_dic[sample].keys()]
    return(result)



rule all_demultiplex:
    input:
        ############################
        # Single modality analysis #
        ############################
        expand('results/single_modality/{modality}/seurat_{binwidth}/Seurat_object.Rds', modality = antibodies_list,binwidth=binsize),         # Merge
        expand('results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered.Rds',modality=antibodies_list,binwidth=binsize),  # Cluster
        expand('results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered_renamed.Rds', modality=antibodies_list, binwidth=binsize),  # Rename
        expand('results/single_modality/{modality}/seurat_{binwidth}/integration/integration_RNA.Rds', modality=antibodies_list, binwidth=binsize), # Integration with scRNA-seq

        ################################
        # Multiple modalities analysis #
        ################################
        [expand('results/multiple_modalities/{combination}/seurat_{binwidth}/Seurat_object.Rds', combination = "_".join(combination), binwidth=binsize) for combination in modalities_combinations],
        [expand('results/multiple_modalities/{combination}/seurat_{binwidth}/Seurat_object_clustered.Rds', combination = "_".join(combination), binwidth=binsize) for combination in modalities_combinations],
        [expand('results/multiple_modalities/{combination}/seurat_{binwidth}/integration/integration_RNA.Rds',combination="_".join(combination),binwidth=binsize) for combination in modalities_combinations],

        # Fragments file
        expand('results/single_modality/{modality}/fragments/fragments.tsv.gz', modality = antibodies_list),  # Merge
        expand('results/single_modality/{modality}/bigwig/', modality = antibodies_list),

rule merge_same_modality:
    input:
        seurat = lambda wildcards: ['results/{sample}/{modality}_{barcode}/seurat/bin_{binwidth}/Seurat_object.Rds'.format( \
            sample=sample, \
            modality=wildcards.modality, \
            barcode = barcodes_dict[sample][wildcards.modality], \
            binwidth=wildcards.binwidth) \
                for sample in barcodes_dict.keys() if wildcards.modality in barcodes_dict[sample].keys()],
        script = os.path.dirname(workflow.basedir) + '/scripts/merge_objects.R'
    output:
        'results/single_modality/{modality}/seurat_{binwidth}/Seurat_object.Rds',
    shell:
        'Rscript {input.script} -i {input.seurat} -o {output}'


rule cluster:
    input:
        seurat = 'results/{x}/{modality}/seurat_{binwidth}/Seurat_object.Rds',
        script = os.path.dirname(workflow.basedir) + '/scripts/UMAP_cluster.R'
    output:
        'results/{x}/{modality}/seurat_{binwidth}/Seurat_object_clustered.Rds'
    params:

    shell:
        "Rscript {input.script} -i {input.seurat} -o {output}"

rule rename_clusters:
    input:
        seurat   = 'results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered.Rds',
        notebook =  os.path.dirname(workflow.basedir) + '/notebooks/single_modality/{modality}_rename_clusters.Rmd',
    output:
        'results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered_renamed.Rds'
    params:
        report     = os.getcwd() + '/results/single_modality/{modality}/seurat_{binwidth}/Seurat_object_clustered_renamed.html',
        out_prefix = os.getcwd() + '/results/'
    shell:
        "Rscript -e \"rmarkdown::render(input='{input.notebook}',\
                                        output_file = '{params.report}', \
                                        params=list(out_prefix = '{params.out_prefix}',modality = '{wildcards.modality}', binsize = '{wildcards.binwidth}'))\" "


rule merged_diff_modality:
    input:
        seurat = lambda wildcards: get_input_for_multiple_modalities_merge(combination=wildcards.combination,\
                                                                           binwidth = wildcards.binwidth),
        script = os.path.dirname(workflow.basedir) + '/scripts/merge_modalities2.R'
    output:
        'results/multiple_modalities/{combination}/seurat_{binwidth}/Seurat_object.Rds'

    shell:
        'Rscript {input.script} -i {input.seurat} -m {wildcards.combination} -o {output}'



rule integrate_with_scRNA:
    input:
        seurat = lambda wildcards: 'results/{x}/{modality}/seurat_{binwidth}/Seurat_object_clustered_renamed.Rds' if wildcards.x == 'single_modality' else 'results/{x}/{modality}/seurat_{binwidth}/Seurat_object_clustered.Rds',
        rna    = '/data/proj/GCB_MB/single-cell-CUT-Tag/nbiotech_paper/analysis/results/Sten_RNA/clustering/01.clustering_20000cells.Rds', # TODO fix path here
        script = os.path.dirname(workflow.basedir) + '/scripts/integrate_CT_RNAseq.R'
    output:
        'results/{x}/{modality}/seurat_{binwidth}/integration/integration_RNA.Rds'
    shell:
        "Rscript {input.script} -i {input.seurat} -r {input.rna} -o {output}"

rule merge_fragments_per_single_modality:
    input:
        fragments = lambda wildcards: get_input_for_fragments_merge(barcodes_dict,wildcards.modality),
    output:
        fragments = 'results/single_modality/{modality}/fragments/fragments.tsv.gz',
        index     = 'results/single_modality/{modality}/fragments/fragments.tsv.gz.tbi',
    params:
        tmpdir    = config['general']['tempdir']
    shell:
        "zcat {input.fragments} | sort -k1,1 -k2,2n -T {params.tmpdir} | bgzip > {output.fragments}; tabix -p bed {output.fragments}"

rule export_bw:
    input:
        seurat    = 'results/single_modality/{modality}/seurat_' + str(binsize) + '/Seurat_object_clustered_renamed.Rds',
        fragments = 'results/single_modality/{modality}/fragments/fragments.tsv.gz',
        script    = os.path.dirname(workflow.basedir) + '/scripts/export_bw.R'
    output:
        bigwig    = directory('results/single_modality/{modality}/bigwig/')
    shell:
        "Rscript {input.script}  -i {input.seurat} -f {input.fragments} -o {output.bigwig}"
