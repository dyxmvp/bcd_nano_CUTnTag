import glob

configfile: workflow.basedir + "/../config/config.yaml"

rule all_demultiplex:
    input:
        expand('results/fastq_per_barcode/{sample_id}/',sample_id = config['samples'].keys())

rule split_fastq:
    input:
        lambda wildcards: config['samples'][wildcards.sample_id]['fastq_path']
    output:
        'results/fastq_per_barcode/{sample_id}/'
    params:
        L1 = lambda wildcards: glob.glob(config['samples'][wildcards.sample_id]['fastq_path'] + "*_L001_*R[123]*.fastq.gz"),
        L2 = lambda wildcards: glob.glob(config['samples'][wildcards.sample_id]['fastq_path'] + "*_L002_*R[123]*.fastq.gz"),
        Nbarcodes = lambda wildcards: len(config['samples'][wildcards.sample_id]['barcodes']),
        script = workflow.basedir + "/../scripts/debarcode.py"
    shell:
        'python3 {params.script} -i {params.L1} -o {output} --single_cell --Nbarcodes {params.Nbarcodes}; '
        'if [ ! -z "{params.L2}" ]; then ' 
        'python3 {params.script} -i {params.L2} -o {output} --single_cell --Nbarcodes {params.Nbarcodes}; fi'

